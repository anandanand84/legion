// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod legion {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SIDE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SIDE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SIDE: [Side; 2] = [
  Side::Bid,
  Side::Ask,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Side(pub i8);
#[allow(non_upper_case_globals)]
impl Side {
  pub const Bid: Self = Self(0);
  pub const Ask: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Bid,
    Self::Ask,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Bid => Some("Bid"),
      Self::Ask => Some("Ask"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for Side {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Side {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for Side {
    type Output = Side;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for Side {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Side {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Side {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ORDER_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ORDER_TYPE: u8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ORDER_TYPE: [OrderType; 4] = [
  OrderType::NONE,
  OrderType::Market,
  OrderType::Limit,
  OrderType::Cancel,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OrderType(pub u8);
#[allow(non_upper_case_globals)]
impl OrderType {
  pub const NONE: Self = Self(0);
  pub const Market: Self = Self(1);
  pub const Limit: Self = Self(2);
  pub const Cancel: Self = Self(3);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Market,
    Self::Limit,
    Self::Cancel,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Market => Some("Market"),
      Self::Limit => Some("Limit"),
      Self::Cancel => Some("Cancel"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for OrderType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OrderType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for OrderType {
    type Output = OrderType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for OrderType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OrderType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OrderType {}
pub struct OrderTypeUnionTableOffset {}

pub enum MarketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Market<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Market<'a> {
    type Inner = Market<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Market<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Market { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MarketArgs) -> flatbuffers::WIPOffset<Market<'bldr>> {
      let mut builder = MarketBuilder::new(_fbb);
      builder.add_qty(args.qty);
      builder.add_id(args.id);
      builder.add_side(args.side);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_SIDE: flatbuffers::VOffsetT = 6;
    pub const VT_QTY: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(Market::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn side(&self) -> Side {
    self._tab.get::<Side>(Market::VT_SIDE, Some(Side::Bid)).unwrap()
  }
  #[inline]
  pub fn qty(&self) -> u64 {
    self._tab.get::<u64>(Market::VT_QTY, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Market<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"id", Self::VT_ID, false)?
     .visit_field::<Side>(&"side", Self::VT_SIDE, false)?
     .visit_field::<u64>(&"qty", Self::VT_QTY, false)?
     .finish();
    Ok(())
  }
}
pub struct MarketArgs {
    pub id: u64,
    pub side: Side,
    pub qty: u64,
}
impl<'a> Default for MarketArgs {
    #[inline]
    fn default() -> Self {
        MarketArgs {
            id: 0,
            side: Side::Bid,
            qty: 0,
        }
    }
}
pub struct MarketBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MarketBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Market::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_side(&mut self, side: Side) {
    self.fbb_.push_slot::<Side>(Market::VT_SIDE, side, Side::Bid);
  }
  #[inline]
  pub fn add_qty(&mut self, qty: u64) {
    self.fbb_.push_slot::<u64>(Market::VT_QTY, qty, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MarketBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MarketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Market<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Market<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Market");
      ds.field("id", &self.id());
      ds.field("side", &self.side());
      ds.field("qty", &self.qty());
      ds.finish()
  }
}
pub enum LimitOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Limit<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Limit<'a> {
    type Inner = Limit<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Limit<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Limit { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args LimitArgs) -> flatbuffers::WIPOffset<Limit<'bldr>> {
      let mut builder = LimitBuilder::new(_fbb);
      builder.add_price(args.price);
      builder.add_qty(args.qty);
      builder.add_id(args.id);
      builder.add_side(args.side);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_SIDE: flatbuffers::VOffsetT = 6;
    pub const VT_QTY: flatbuffers::VOffsetT = 8;
    pub const VT_PRICE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(Limit::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn side(&self) -> Side {
    self._tab.get::<Side>(Limit::VT_SIDE, Some(Side::Bid)).unwrap()
  }
  #[inline]
  pub fn qty(&self) -> u64 {
    self._tab.get::<u64>(Limit::VT_QTY, Some(0)).unwrap()
  }
  #[inline]
  pub fn price(&self) -> u64 {
    self._tab.get::<u64>(Limit::VT_PRICE, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Limit<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"id", Self::VT_ID, false)?
     .visit_field::<Side>(&"side", Self::VT_SIDE, false)?
     .visit_field::<u64>(&"qty", Self::VT_QTY, false)?
     .visit_field::<u64>(&"price", Self::VT_PRICE, false)?
     .finish();
    Ok(())
  }
}
pub struct LimitArgs {
    pub id: u64,
    pub side: Side,
    pub qty: u64,
    pub price: u64,
}
impl<'a> Default for LimitArgs {
    #[inline]
    fn default() -> Self {
        LimitArgs {
            id: 0,
            side: Side::Bid,
            qty: 0,
            price: 0,
        }
    }
}
pub struct LimitBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LimitBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Limit::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_side(&mut self, side: Side) {
    self.fbb_.push_slot::<Side>(Limit::VT_SIDE, side, Side::Bid);
  }
  #[inline]
  pub fn add_qty(&mut self, qty: u64) {
    self.fbb_.push_slot::<u64>(Limit::VT_QTY, qty, 0);
  }
  #[inline]
  pub fn add_price(&mut self, price: u64) {
    self.fbb_.push_slot::<u64>(Limit::VT_PRICE, price, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LimitBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LimitBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Limit<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Limit<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Limit");
      ds.field("id", &self.id());
      ds.field("side", &self.side());
      ds.field("qty", &self.qty());
      ds.field("price", &self.price());
      ds.finish()
  }
}
pub enum CancelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Cancel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Cancel<'a> {
    type Inner = Cancel<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Cancel<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Cancel { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CancelArgs) -> flatbuffers::WIPOffset<Cancel<'bldr>> {
      let mut builder = CancelBuilder::new(_fbb);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(Cancel::VT_ID, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Cancel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"id", Self::VT_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct CancelArgs {
    pub id: u64,
}
impl<'a> Default for CancelArgs {
    #[inline]
    fn default() -> Self {
        CancelArgs {
            id: 0,
        }
    }
}
pub struct CancelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CancelBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Cancel::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CancelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CancelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Cancel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Cancel<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Cancel");
      ds.field("id", &self.id());
      ds.finish()
  }
}
pub enum OrderMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OrderMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrderMessage<'a> {
    type Inner = OrderMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> OrderMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        OrderMessage { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args OrderMessageArgs) -> flatbuffers::WIPOffset<OrderMessage<'bldr>> {
      let mut builder = OrderMessageBuilder::new(_fbb);
      if let Some(x) = args.type_ { builder.add_type_(x); }
      builder.add_type_type(args.type_type);
      builder.finish()
    }

    pub const VT_TYPE_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn type_type(&self) -> OrderType {
    self._tab.get::<OrderType>(OrderMessage::VT_TYPE_TYPE, Some(OrderType::NONE)).unwrap()
  }
  #[inline]
  pub fn type_(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(OrderMessage::VT_TYPE_, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn type__as_market(&self) -> Option<Market<'a>> {
    if self.type_type() == OrderType::Market {
      self.type_().map(Market::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn type__as_limit(&self) -> Option<Limit<'a>> {
    if self.type_type() == OrderType::Limit {
      self.type_().map(Limit::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn type__as_cancel(&self) -> Option<Cancel<'a>> {
    if self.type_type() == OrderType::Cancel {
      self.type_().map(Cancel::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for OrderMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<OrderType, _>(&"type__type", Self::VT_TYPE__TYPE, &"type_", Self::VT_TYPE_, false, |key, v, pos| {
        match key {
          OrderType::Market => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Market>>("OrderType::Market", pos),
          OrderType::Limit => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Limit>>("OrderType::Limit", pos),
          OrderType::Cancel => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Cancel>>("OrderType::Cancel", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct OrderMessageArgs {
    pub type_type: OrderType,
    pub type_: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for OrderMessageArgs {
    #[inline]
    fn default() -> Self {
        OrderMessageArgs {
            type_type: OrderType::NONE,
            type_: None,
        }
    }
}
pub struct OrderMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OrderMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_type_type(&mut self, type_type: OrderType) {
    self.fbb_.push_slot::<OrderType>(OrderMessage::VT_TYPE_TYPE, type_type, OrderType::NONE);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderMessage::VT_TYPE_, type_);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OrderMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OrderMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrderMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for OrderMessage<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("OrderMessage");
      ds.field("type_type", &self.type_type());
      match self.type__type() {
        OrderType::Market => {
          if let Some(x) = self.type_as_market() {
            ds.field("type_", &x)
          } else {
            ds.field("type_", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        OrderType::Limit => {
          if let Some(x) = self.type_as_limit() {
            ds.field("type_", &x)
          } else {
            ds.field("type_", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        OrderType::Cancel => {
          if let Some(x) = self.type_as_cancel() {
            ds.field("type_", &x)
          } else {
            ds.field("type_", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("type_", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_order_message<'a>(buf: &'a [u8]) -> OrderMessage<'a> {
  unsafe { flatbuffers::root_unchecked::<OrderMessage<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_order_message<'a>(buf: &'a [u8]) -> OrderMessage<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<OrderMessage<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `OrderMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_message_unchecked`.
pub fn root_as_order_message(buf: &[u8]) -> Result<OrderMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrderMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrderMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_message_unchecked`.
pub fn size_prefixed_root_as_order_message(buf: &[u8]) -> Result<OrderMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrderMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrderMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_message_unchecked`.
pub fn root_as_order_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrderMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrderMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_message_unchecked`.
pub fn size_prefixed_root_as_order_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrderMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrderMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrderMessage`.
pub unsafe fn root_as_order_message_unchecked(buf: &[u8]) -> OrderMessage {
  flatbuffers::root_unchecked::<OrderMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrderMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrderMessage`.
pub unsafe fn size_prefixed_root_as_order_message_unchecked(buf: &[u8]) -> OrderMessage {
  flatbuffers::size_prefixed_root_unchecked::<OrderMessage>(buf)
}
#[inline]
pub fn finish_order_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<OrderMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<OrderMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod legion

